package com.mykotlinapps.bodybuilder

import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ScrollView
import android.widget.TextView
import com.airbnb.lottie.LottieAnimationView
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.mykotlinapps.bodybuilder.data.WorkoutTemplate
import com.mykotlinapps.bodybuilder.databinding.FragmentPlansBinding

class PlansFragment : Fragment() {

    private var _binding: FragmentPlansBinding? = null
    private val binding get() = _binding!!
    private lateinit var loadingAnimation: LottieAnimationView
    private lateinit var fragmentContent: ScrollView

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        _binding = FragmentPlansBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        loadingAnimation = binding.loadingAnimation
        fragmentContent = binding.fragmentContent

        // Show loading animation and hide content initially
        showLoadingAnimation()

        // Simulate loading duration
        Handler(Looper.getMainLooper()).postDelayed({
            hideLoadingAnimation()
        }, 3000) // 3 seconds delay

        setupRecyclerView()
    }

    private fun setupRecyclerView() {
        val workoutTemplates = generateAIGeneratedTemplates() + getCommunitySharedTemplates()

        binding.exerciseRecyclerView.apply {
            layoutManager = LinearLayoutManager(context)
            adapter = WorkoutTemplateAdapter(workoutTemplates) { template ->
                showTemplateDetails(template)
            }
        }

        binding.generatedWorkoutRecyclerView.apply {
            layoutManager = LinearLayoutManager(context)
            adapter = WorkoutTemplateAdapter(workoutTemplates) { template ->
                showTemplateDetails(template)
            }
        }

        binding.communityWorkoutsRecyclerView.apply {
            layoutManager = LinearLayoutManager(context)
            adapter = WorkoutTemplateAdapter(workoutTemplates) { template ->
                showTemplateDetails(template)
            }
        }

        showEmptyState(binding.exerciseRecyclerView, binding.exerciseRecyclerViewEmptyText)
        showEmptyState(binding.generatedWorkoutRecyclerView, binding.generatedWorkoutRecyclerViewEmptyText)
        showEmptyState(binding.communityWorkoutsRecyclerView, binding.communityWorkoutsRecyclerViewEmptyText)
    }

    private fun generateAIGeneratedTemplates(): List<WorkoutTemplate> {
        return listOf(
            WorkoutTemplate("AI Generated Plan 1", "A comprehensive plan generated by AI."),
            WorkoutTemplate("AI Generated Plan 2", "Another AI-generated workout plan.")
        )
    }

    private fun getCommunitySharedTemplates(): List<WorkoutTemplate> {
        return listOf(
            WorkoutTemplate("Community Plan 1", "A popular plan shared by the community."),
            WorkoutTemplate("Community Plan 2", "Another community favorite.")
        )
    }

    private fun showTemplateDetails(template: WorkoutTemplate) {
        // Show detailed information about the selected template
    }

    private fun showEmptyState(recyclerView: RecyclerView, placeholder: TextView) {
        if (recyclerView.adapter?.itemCount == 0) {
            recyclerView.visibility = View.GONE
            placeholder.visibility = View.VISIBLE
        } else {
            recyclerView.visibility = View.VISIBLE
            placeholder.visibility = View.GONE
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }

    private fun showLoadingAnimation() {
        loadingAnimation.visibility = View.VISIBLE
        fragmentContent.visibility = View.GONE
    }

    private fun hideLoadingAnimation() {
        loadingAnimation.visibility = View.GONE
        fragmentContent.visibility = View.VISIBLE
    }
}
